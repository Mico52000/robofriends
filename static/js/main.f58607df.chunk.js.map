{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBar.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","style","overflowY","border","height","this","props","children","Component","Card","id","name","email","className","alt","src","CardList","components","robots","map","robot","i","key","SearchBox","onSearchChange","type","placeholder","onChange","ErrorBoundry","state","hasErrors","error","info","setState","App","event","searchField","target","value","filteredRobots","filter","toLowerCase","includes","length","fetch","then","response","json","users","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAMqBA,E,uKAKb,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAWC,OAAQ,mBAAoBC,OAAO,UAAWC,KAAKC,MAAMC,c,GANnEC,aCJfC,E,uKAGhB,IAAD,EAC4BJ,KAAKC,MAAtBI,EADX,EACWA,GAAGC,EADd,EACcA,KAAKC,EADnB,EACmBA,MACnB,OAEI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BL,EAA1B,mBACnB,4BAAKC,GACL,2BAAIC,Q,GAVkBJ,aCEbQ,E,uKAER,IAECC,EADWZ,KAAKC,MAAfY,OACmBC,KAAI,SAACC,EAAMC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKF,EAAMV,GAAIC,KAAOS,EAAMT,KAAMD,GAAIU,EAAMV,GAAIE,MAAOQ,EAAMR,WAI9E,OAEG,kBAAC,WAAD,KAAWK,O,GAXgBT,aCAjBe,G,6KACR,IACEC,EAAiBnB,KAAKC,MAAtBkB,eACP,OACI,yBAAKX,UAAU,QACX,2BAAOY,KAAK,SAASC,YAAY,gBAAgBb,UAAU,6CAI3Dc,SAAUH,S,GATahB,cCDlBoB,G,6DACjB,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,WAAU,GAHL,E,8DAOKC,EAAMC,GAEpB3B,KAAK4B,SAAS,CAACH,WAAU,M,+BAIzB,OAAGzB,KAAKwB,MAAMC,UAEH,qCAIHzB,KAAKC,MAAMC,a,GApBeC,cCOrB0B,E,kDACjB,aAAc,IAAD,8BACT,gBAMJV,eAAiB,SAACW,GAEd,EAAKF,SAAS,CAAEG,YAAaD,EAAME,OAAOC,SAP1C,EAAKT,MAAM,CACPX,OAAO,GACPkB,YAAY,IAJP,E,qDAeJ,IAAD,OACEG,EAAiBlC,KAAKwB,MAAMX,OAAOsB,QAAO,SAACpB,GAC7C,OAAOA,EAAMT,KAAK8B,cAAcC,SAAS,EAAKb,MAAMO,YAAYK,kBAEpE,OAAQpC,KAAKwB,MAAMX,OAAOyB,OAE1B,yBAAK9B,UAAU,MACX,wBAAIA,UAAU,MAAd,qBACA,kBAAC,EAAD,CAAWW,eAAgBnB,KAAKmB,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUN,OAAQqB,OAN9B,yC,0CAagB,IAAD,OACfK,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAC5DA,EAASC,UACZF,MAAK,SAAAG,GAAK,OACR,EAAKf,SAAS,CAACf,OAAO8B,W,GAtCDxC,aCEbyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAGN,kBAAC,EAAD,MAGDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.f58607df.chunk.js","sourcesContent":["import React , {Component} from \"react\"\r\n\r\n\r\n\r\n\r\n\r\nexport default class Scroll extends Component{\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div style={{overflowY:'scroll' , border: '1px solid black ', height:'500px'}}>{this.props.children}</div>\r\n            \r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Card extends Component{\r\n    \r\n    render()\r\n    {\r\n        const {id,name,email} = this.props\r\n    return(\r\n\r\n        <div className=\"tc bg-light-green dib br3 ma2 pa3 grow shadow-5 \">\r\n            <img alt=\"robo\" src={`https://robohash.org/${id}?size=200x200`}></img>\r\n            <h3>{name}</h3>\r\n            <p>{email}</p>\r\n            \r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\n","import React, { Component, Fragment } from 'react'\r\nimport  Card from './Card.js';\r\n\r\n\r\nexport default class CardList extends Component{\r\n    \r\n    render(){\r\n        const {robots} = this.props;\r\n        const components = robots.map((robot,i) => {\r\n            return <Card key={robot.id} name ={robot.name} id={robot.id} email={robot.email}/>\r\n        }\r\n        )\r\n        \r\n        return(\r\n           \r\n           <Fragment>{components}</Fragment>\r\n        )\r\n    }\r\n}","import React , {Component} from 'react'\r\nimport './SearchBar.css'\r\n\r\n\r\nexport default class SearchBox extends Component{\r\n    render(){\r\n        const {onSearchChange}= this.props\r\n        return(\r\n            <div className=\"pa2 \">\r\n                <input type=\"search\" placeholder=\"search Robots\" className=\" tc pa3 ba  b--dark-green bg-lightest-blue\"\r\n                \r\n                \r\n\r\n                onChange={onSearchChange}></input>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}","import React , {Component} from 'react'\r\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\r\n\r\nexport default class ErrorBoundry extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            hasErrors:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n\r\n        this.setState({hasErrors:true})\r\n    }\r\n    render()\r\n    {\r\n        if(this.state.hasErrors)\r\n        {\r\n            return <h1>Ooops</h1>\r\n        }\r\n        else{\r\n            return(\r\n                this.props.children\r\n            )\r\n        }\r\n\r\n    }\r\n}","import React , {Component,Fragment} from \"react\"\r\nimport Scroll from '../components/Scroll.js'\r\nimport CardList from '../components/CardList.js'\r\nimport SearchBox from \"../components/SearchBar.js\";\r\nimport 'tachyons';\r\nimport './App.css';\r\nimport ErrorBoundry from \"../components/ErrorBoundry.js\"\r\n\r\n\r\n\r\nexport default class App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robots:[],\r\n            searchField:\"\"\r\n        }\r\n    }\r\n    onSearchChange = (event) =>{\r\n        \r\n        this.setState({ searchField: event.target.value})\r\n        \r\n    \r\n\r\n   }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter((robot)=> {\r\n            return(robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()))\r\n        })\r\n        return !this.state.robots.length ?\r\n        <h1>Loading</h1> :\r\n        <div className=\"tc\">\r\n            <h1 className=\"f2\"> Virtual Bot List</h1>\r\n            <SearchBox onSearchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n                \r\n            </Scroll>\r\n        </div>\r\n        \r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response =>\r\n             response.json()\r\n        ).then(users =>\r\n            this.setState({robots:users})\r\n        )\r\n        \r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n \n   \n   <App  />,\n\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}